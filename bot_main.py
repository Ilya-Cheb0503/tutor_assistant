import asyncio

import os
import time
from functools import partial

import nest_asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (Application, CallbackQueryHandler, CommandHandler,
                          ContextTypes, MessageHandler, filters)

load_dotenv()

from settings import *
from bot_functions import *
from bd_functions import add_student, get_student, update_student
from registations_proccess import *
from postboy import *
from constants import * 


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    
    user_inf = update.effective_user
    user_id = user_inf.id
    user_name = user_inf.username


    query = update.callback_query
    answer = await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    data = query.data


    # choosed_option = options[data]
    days_count = 7
    response_start = '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
    response_none_lessons = '–ú–æ–∂–µ—à—å –æ—Ç–¥—ã—Ö–∞—Ç—å, —Ç—ã –∏ —Ç–∞–∫ –º–æ–ª–æ–¥–µ—Ü ;)'

    lessons_informations, lessons_count = await get_kids_lessons(days_count, student_tg_id=user_id)
    


    if lessons_count.__eq__(0):
        response_dayly = (
        f'{response_start} —É —Ç–µ–±—è –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π.\n{response_none_lessons}'
    )
    else:

        first_lesson = lessons_informations[0]

        start_inf, end_inf, kid_name = first_lesson
        day_start_inf, start_lesson, finish_lesson = await message_creator(start_inf, end_inf)

        response_dayly = (
            f'{response_start} —É —Ç–µ–±—è –µ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è.\n'
            f'–ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ—Å—Ç–æ–∏—Ç—Å—è {day_start_inf}\n\n'
            f'{start_lesson}.\n'
            f'{finish_lesson}.\n\n'
            f'üïë –í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è —É–∫–∞–∑–∞–Ω–æ –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É.'
        )

    keyboard = [
        [InlineKeyboardButton('–ë–ª–∏–∂–∞–π—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ', callback_data='near_lesson')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text=response_dayly, reply_markup=reply_markup)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_inf = update.effective_user
    user_id = user_inf.id
    
    special_users = [
        5086356786,
        2091023767
    ]

    message_text = (
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n'
        '–Ø –±—É–¥—É –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å, –∫–æ–≥–¥–∞ —É —Ç–µ–±—è –ø—Ä–µ–¥—Å—Ç–æ—è—Ç –∑–∞–Ω—è—Ç–∏—è.\n'
        '–¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –æ—Ç –º–µ–Ω—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –¥–æ –∑–∞–Ω—è—Ç–∏—è\n\n'
        '–ö—Ä–æ–º–µ —Ç–æ–≥–æ, —Ç—ã –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, '
        '—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ —É —Ç–µ–±—è –±–ª–∏–∂–∞–π—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª–µ –∏–ª–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.'
    )
    keyboard = [
            ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'],
            ['–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è']
        ]
    if user_id in special_users:
        keyboard.append(['–†–∞—Å—Å—ã–ª–∫–∞'])

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    student = await get_student(user_id)
    
    if not student:
        context.user_data['reg_status'] = 'start'
        await context.bot.send_message(chat_id=user_id, text=message_text)
        await register_proccess(context, update)
    
    else:
        name = student[1]
        message_text = f'–ü—Ä–∏–≤–µ—Ç, {name}!'
        await update.message.reply_text(message_text, reply_markup=reply_markup)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    current_text = update.message.text
    if 'reg_status' in context.user_data:
        await register_proccess(context, update)
    elif 'message_state' in context.user_data: 
        await send_messages(update, context)
    
    elif current_text.__eq__('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'):
        await hi_again(update, context)

    elif current_text.__eq__('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è'):
        context.user_data['reg_status'] = 'start'
        await register_proccess(context, update)
    
    elif current_text.__eq__('–†–∞—Å—Å—ã–ª–∫–∞'):
        await send_messages(update, context)


async def start_notion(update, context):
    user_id = update.effective_user.id
    if str(user_id).__eq__('2091023767'):

        logging.info('–ó–ê–ü–£–°–ö–ê–ï–ú —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')

        await test_f(update, context) # –°—Ç–∞—Ä—Ç—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å, —Ç–∞–∫ –∫–∞–∫ –≤ —Ä–∞–ø–∏—Å–∞–Ω–∏–∏ –ø–µ—Ä–≤–æ–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç

        scheduler = AsyncIOScheduler()
        scheduler.add_job(partial(test_f, update, context), 'interval', minutes=30)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        scheduler.start()

        logging.info('–ó–ê–ü–£–°–¢–ò–õ–ò —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
        await context.bot.send_message(chat_id=user_id, text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã')

    else:
        pass


async def main(telegram_bot_token) -> None:
    
    nest_asyncio.apply()

    application = Application.builder().token(telegram_bot_token).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('developer_hand', start_notion))
    application.add_handler(CallbackQueryHandler(button_callback))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND | filters.PHOTO, button_handler))


    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logging.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
          # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        await application.run_polling()
    except (KeyboardInterrupt, SystemExit):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        logging.error(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", exc_info=True)
        await application.stop()
    

if __name__ == '__main__':
    
    try:
        # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
        bot_token = os.getenv('BOT_TOKEN')
    except Exception as er:
        logging.error(f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞.\n{er}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ .env')

    asyncio.run(main(bot_token))
        